import { PrismaClient } from '../lib/generated/prisma'

const prisma = new PrismaClient()

async function seedOriginalFarm() {
  console.log('üå± Restoring original farm data structure...')

  try {
    // Clear existing data
    console.log('üßπ Clearing existing data...')
    await prisma.treeLog.deleteMany()
    await prisma.batchLog.deleteMany() 
    await prisma.treeCost.deleteMany()
    await prisma.tree.deleteMany()
    await prisma.section.deleteMany()
    await prisma.plot.deleteMany()
    await prisma.variety.deleteMany()
    await prisma.fertilizer.deleteMany()
    await prisma.pesticide.deleteMany()
    await prisma.plantDisease.deleteMany()
    await prisma.activity.deleteMany()
    await prisma.activityCost.deleteMany()
    await prisma.users.deleteMany()

    // 1. Create Reference Data
    console.log('üìã Creating reference data...')
    
    // Durian varieties
    await prisma.variety.createMany({
      data: [
        { name: '‡∏´‡∏°‡∏≠‡∏ô‡∏ó‡∏≠‡∏á' },
        { name: '‡∏ä‡∏∞‡∏ô‡∏µ' },
        { name: '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏ß' },
        { name: '‡∏Å‡∏£‡∏∞‡∏î‡∏∏‡∏°' },
        { name: '‡πÑ‡∏ú‡πà‡∏ó‡∏≠‡∏á' },
        { name: '‡∏´‡∏•‡∏á‡∏•‡∏±‡∏ö‡πÅ‡∏•' },
        { name: '‡∏û‡∏∏‡∏ó‡∏ã‡∏≤' },
        { name: '‡∏Å‡πâ‡∏≠‡∏ô‡πÉ‡∏´‡∏ç‡πà' },
      ],
    })

    // Fertilizers
    await prisma.fertilizer.createMany({
      data: [
        { name: '‡∏õ‡∏∏‡πà‡∏¢‡∏Ñ‡∏≠‡∏Å' },
        { name: '‡∏õ‡∏∏‡πà‡∏¢‡πÄ‡∏Ñ‡∏°‡∏µ 15-15-15' },
        { name: '‡∏õ‡∏∏‡πà‡∏¢‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô' },
        { name: '‡∏õ‡∏∏‡πà‡∏¢‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™' },
        { name: '‡∏õ‡∏∏‡πà‡∏¢‡πÇ‡∏õ‡πÅ‡∏ï‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°' },
        { name: '‡∏õ‡∏∏‡πà‡∏¢‡∏´‡∏°‡∏±‡∏Å' },
        { name: '‡∏õ‡∏∏‡πà‡∏¢‡∏ô‡πâ‡∏≥' },
        { name: '‡∏õ‡∏∏‡πà‡∏¢‡πÉ‡∏ö' },
      ],
    })

    // Pesticides
    await prisma.pesticide.createMany({
      data: [
        { name: '‡∏¢‡∏≤‡∏Ü‡πà‡∏≤‡πÅ‡∏°‡∏•‡∏á' },
        { name: '‡∏¢‡∏≤‡∏Ü‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤' },
        { name: '‡∏™‡∏≤‡∏£‡∏Å‡∏≥‡∏à‡∏±‡∏î‡∏ß‡∏±‡∏ä‡∏û‡∏∑‡∏ä' },
        { name: '‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏û‡∏∑‡∏ä' },
        { name: '‡∏™‡∏ö‡∏π‡πà‡πÄ‡∏´‡∏•‡∏ß' },
        { name: '‡∏¢‡∏≤‡∏Ü‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÅ‡∏ö‡∏Ñ‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢' },
        { name: '‡∏™‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏°‡∏•‡∏á' },
      ],
    })

    // Plant diseases
    await prisma.plantDisease.createMany({
      data: [
        { name: '‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏à‡∏∏‡∏î' },
        { name: '‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡∏ô‡πâ‡∏≥‡∏Ñ‡πâ‡∏≤‡∏á' },
        { name: '‡πÇ‡∏£‡∏Ñ‡πÄ‡∏´‡∏°‡πá‡∏ô‡πÄ‡∏ô‡πà‡∏≤' },
        { name: '‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ' },
        { name: '‡πÅ‡∏°‡∏•‡∏á‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡∏∑‡∏ä' },
        { name: '‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡πÅ‡∏õ‡πâ‡∏á' },
        { name: '‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡πÅ‡∏´‡πâ‡∏á' },
        { name: '‡πÅ‡∏°‡∏•‡∏á‡∏Å‡∏±‡∏î‡∏Å‡∏¥‡∏ô' },
      ],
    })

    // Activities
    await prisma.activity.createMany({
      data: [
        { name: '‡∏£‡∏î‡∏ô‡πâ‡∏≥' },
        { name: '‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πà‡∏¢' },
        { name: '‡∏â‡∏µ‡∏î‡∏¢‡∏≤' },
        { name: '‡∏ï‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏¥‡πà‡∏á' },
        { name: '‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß' },
        { name: '‡∏î‡∏π‡πÅ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ' },
        { name: '‡∏Å‡∏≥‡∏à‡∏±‡∏î‡∏ß‡∏±‡∏ä‡∏û‡∏∑‡∏ä' },
        { name: '‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏£‡∏Ñ' },
        { name: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' },
      ],
    })

    console.log('‚úÖ Reference data created successfully!')

    // 2. Create Plots A, B, C
    console.log('üó∫Ô∏è Creating farm plots...')
    
    const plots = [
      {
        code: 'A',
        name: '‡∏™‡∏ß‡∏ô‡∏ß‡∏¥‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πå‡∏®‡∏¥‡∏£‡∏¥ - ‡πÅ‡∏õ‡∏•‡∏á A',
        description: '‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏õ‡∏•‡∏π‡∏Å‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô - ‡πÅ‡∏õ‡∏•‡∏á A',
        area: 5.0, // 5 ‡πÑ‡∏£‡πà
        soilType: '‡∏î‡∏¥‡∏ô‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß'
      },
      {
        code: 'B',
        name: '‡∏™‡∏ß‡∏ô‡∏ß‡∏¥‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πå‡∏®‡∏¥‡∏£‡∏¥ - ‡πÅ‡∏õ‡∏•‡∏á B', 
        description: '‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≠‡∏á‡∏õ‡∏•‡∏π‡∏Å‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô - ‡πÅ‡∏õ‡∏•‡∏á B',
        area: 4.5, // 4.5 ‡πÑ‡∏£‡πà
        soilType: '‡∏î‡∏¥‡∏ô‡∏£‡πà‡∏ß‡∏ô'
      },
      {
        code: 'C',
        name: '‡∏™‡∏ß‡∏ô‡∏ß‡∏¥‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πå‡∏®‡∏¥‡∏£‡∏¥ - ‡πÅ‡∏õ‡∏•‡∏á C',
        description: '‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏õ‡∏•‡∏π‡∏Å‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô - ‡πÅ‡∏õ‡∏•‡∏á C', 
        area: 3.5, // 3.5 ‡πÑ‡∏£‡πà
        soilType: '‡∏î‡∏¥‡∏ô‡∏£‡πà‡∏ß‡∏ô‡∏õ‡∏ô‡∏ó‡∏£‡∏≤‡∏¢'
      }
    ]

    const createdPlots = []
    for (const plotData of plots) {
      const plot = await prisma.plot.create({ data: plotData })
      createdPlots.push(plot)
      console.log(`‚úì Created plot ${plot.code}: ${plot.name}`)
    }

    // 3. Create Sections
    console.log('üìç Creating sections...')
    
    let totalSections = 0
    
    // Plot A: 60 sections (A1 - A60)
    console.log('  Creating Plot A sections (A1-A60)...')
    for (let i = 1; i <= 60; i++) {
      await prisma.section.create({
        data: {
          plotId: createdPlots[0].id, // Plot A
          sectionNumber: i,
          sectionCode: `A${i}`,
          name: `‡πÇ‡∏ã‡∏ô A${i}`,
          area: 0.08, // ~80 ‡∏ï‡∏£‡∏°. per section
          soilType: '‡∏î‡∏¥‡∏ô‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß',
          description: `‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà ${i} ‡πÉ‡∏ô‡πÅ‡∏õ‡∏•‡∏á A`
        }
      })
      totalSections++
    }

    // Plot B: 30 sections (B1 - B30)
    console.log('  Creating Plot B sections (B1-B30)...')
    for (let i = 1; i <= 30; i++) {
      await prisma.section.create({
        data: {
          plotId: createdPlots[1].id, // Plot B
          sectionNumber: i,
          sectionCode: `B${i}`,
          name: `‡πÇ‡∏ã‡∏ô B${i}`,
          area: 0.15, // ~150 ‡∏ï‡∏£‡∏°. per section
          soilType: '‡∏î‡∏¥‡∏ô‡∏£‡πà‡∏ß‡∏ô',
          description: `‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà ${i} ‡πÉ‡∏ô‡πÅ‡∏õ‡∏•‡∏á B`
        }
      })
      totalSections++
    }

    // Plot C: 20 sections (C1 - C20)
    console.log('  Creating Plot C sections (C1-C20)...')
    for (let i = 1; i <= 20; i++) {
      await prisma.section.create({
        data: {
          plotId: createdPlots[2].id, // Plot C
          sectionNumber: i,
          sectionCode: `C${i}`,
          name: `‡πÇ‡∏ã‡∏ô C${i}`,
          area: 0.175, // ~175 ‡∏ï‡∏£‡∏°. per section
          soilType: '‡∏î‡∏¥‡∏ô‡∏£‡πà‡∏ß‡∏ô‡∏õ‡∏ô‡∏ó‡∏£‡∏≤‡∏¢',
          description: `‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà ${i} ‡πÉ‡∏ô‡πÅ‡∏õ‡∏•‡∏á C`
        }
      })
      totalSections++
    }

    console.log(`‚úÖ Created ${totalSections} sections total (A: 60, B: 30, C: 20)`)

    // 4. Optional: Create sample trees for demonstration
    console.log('üå≥ Creating sample trees...')
    
    // Get all sections for tree creation
    const allSections = await prisma.section.findMany({
      include: { plot: true },
      orderBy: [{ plotId: 'asc' }, { sectionNumber: 'asc' }]
    })

    const varieties = ['‡∏´‡∏°‡∏≠‡∏ô‡∏ó‡∏≠‡∏á', '‡∏ä‡∏∞‡∏ô‡∏µ', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏ß', '‡∏Å‡∏£‡∏∞‡∏î‡∏∏‡∏°', '‡πÑ‡∏ú‡πà‡∏ó‡∏≠‡∏á']
    let treeCount = 0

    // Create 1-3 trees per section (for demonstration)
    for (const section of allSections.slice(0, 20)) { // Only first 20 sections for demo
      const treesInSection = Math.floor(Math.random() * 3) + 1 // 1-3 trees

      for (let t = 1; t <= treesInSection; t++) {
        const treeCode = `${section.sectionCode}-${t.toString().padStart(2, '0')}`
        
        await prisma.tree.create({
          data: {
            location_id: treeCode,
            treeCode: treeCode,
            variety: varieties[Math.floor(Math.random() * varieties.length)],
            plantedDate: new Date(2020 + Math.floor(Math.random() * 4), 
                                Math.floor(Math.random() * 12), 
                                Math.floor(Math.random() * 28) + 1),
            status: Math.random() > 0.95 ? 'sick' : 'alive',
            treeNumber: t,
            sectionId: section.id,
            fruitCount: Math.floor(Math.random() * 80) + 20,
            bloomingStatus: ['blooming', 'budding', 'not_blooming'][Math.floor(Math.random() * 3)],
            treeHeight: 3.0 + Math.random() * 2.0, // 3-5 meters
            trunkDiameter: 0.3 + Math.random() * 0.4, // 30-70 cm
          }
        })
        treeCount++
      }
    }

    console.log(`‚úÖ Created ${treeCount} sample trees`)

    // 5. Final Summary
    console.log('\nüéâ Original farm data restoration completed!')
    
    const plotSummary = await prisma.plot.findMany({
      include: {
        _count: {
          select: {
            sections: true
          }
        }
      },
      orderBy: { code: 'asc' }
    })

    const totalTreesCount = await prisma.tree.count()
    const varietiesCount = await prisma.variety.count()
    const fertilizersCount = await prisma.fertilizer.count()
    const pesticidesCount = await prisma.pesticide.count()
    const diseasesCount = await prisma.plantDisease.count()
    const activitiesCount = await prisma.activity.count()

    console.log('\nüìä Farm Structure Summary:')
    plotSummary.forEach(plot => {
      console.log(`   ${plot.code}: ${plot.name} (${plot._count.sections} sections, ${plot.area} ‡πÑ‡∏£‡πà)`)
    })

    console.log('\nüìã Reference Data Summary:')
    console.log(`   - ${varietiesCount} durian varieties`)
    console.log(`   - ${fertilizersCount} fertilizer types`)
    console.log(`   - ${pesticidesCount} pesticide types`)
    console.log(`   - ${diseasesCount} plant diseases`)
    console.log(`   - ${activitiesCount} farm activities`)
    console.log(`   - ${totalTreesCount} sample trees`)

    console.log('\n‚úÖ Your original farm structure has been restored!')
    console.log('üå± Ready for logging activities and tree management!')

  } catch (error) {
    console.error('‚ùå Farm restoration failed:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Run seeding
if (require.main === module) {
  seedOriginalFarm()
    .then(() => {
      console.log('‚úÖ Farm restoration completed!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå Farm restoration failed:', error)
      process.exit(1)
    })
}

export { seedOriginalFarm }