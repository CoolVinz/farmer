// app/tree/[id]/page.tsx ‚Äî with Tailwind v4 styling, Home button, and variety dropdown
"use client";

import { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import { createClient } from "@supabase/supabase-js";

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_KEY!
);

export default function TreeProfileByLocation() {
  const { id } = useParams();
  const [tree, setTree] = useState<any>(null);
  const [history, setHistory] = useState<any[]>([]);
  const [varieties, setVarieties] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    if (typeof id === "string") {
      const locationId = (id as string).toUpperCase();
      fetchTree(locationId);
      fetchHistory(locationId);
      fetchVarieties();
    }
  }, [id]);

  async function fetchTree(locationId: string) {
    const { data } = await supabase
      .from("trees")
      .select("*")
      .eq("location_id", locationId)
      .order("planted_date", { ascending: false })
      .limit(1)
      .maybeSingle();

    setTree(data);
    setLoading(false);
  }

  async function fetchHistory(locationId: string) {
    const { data } = await supabase
      .from("trees")
      .select("*")
      .eq("location_id", locationId)
      .order("tree_number", { ascending: true });

    setHistory(data || []);
  }

  async function fetchVarieties() {
    const { data } = await supabase
      .from("varieties")
      .select("*")
      .order("name", { ascending: true });

    setVarieties(data || []);
  }

  async function saveTree() {
    if (!tree?.id) return;
    const updatedTree = {
      ...tree,
      death_date:
        tree.status === "dead" && !tree.death_date
          ? new Date().toISOString().split("T")[0]
          : tree.status !== "dead"
          ? null
          : tree.death_date,
    };
    setSaving(true);
    const { error } = await supabase
      .from("trees")
      .update(updatedTree)
      .eq("id", tree.id);
    setSaving(false);
    if (error) alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");
    else alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÅ‡∏•‡πâ‡∏ß");
  }

  async function createNewTree() {
    if (tree?.status !== "dead") {
      return alert(
        '‚ùå ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏•‡∏π‡∏Å‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏ï‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      );
    }

    const locationId = tree.location_id;
    const { count } = await supabase
      .from("trees")
      .select("*", { count: "exact", head: true })
      .eq("location_id", locationId);

    const newTree = {
      location_id: locationId,
      variety: "",
      status: "alive",
      planted_date: new Date().toISOString().split("T")[0],
      tree_number: (count || 0) + 1,
    };

    const { error } = await supabase.from("trees").insert(newTree);
    if (error) return alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà");

    alert("‚úÖ ‡∏õ‡∏•‡∏π‡∏Å‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
    location.reload();
  }

  if (loading)
    return <p className="text-center mt-10 text-base">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>;
  if (!tree)
    return (
      <p className="text-center mt-10 text-base">
        ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏à‡∏∏‡∏î {(id as string).toUpperCase()}
      </p>
    );

  return (
    <main className="max-w-xl mx-auto p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">
          üå≥ ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ {(id as string).toUpperCase()}
        </h1>
        <a href="/" className="text-blue-600 underline text-base">
          üè† Home
        </a>
      </div>

      <div className="space-y-6">
        <div>
          <label className="block text-base font-medium mb-1">‡∏™‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå</label>
          <select
            className="w-full border px-4 py-2 rounded-xl"
            value={tree.variety || ""}
            onChange={(e) => setTree({ ...tree, variety: e.target.value })}
          >
            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå --</option>
            {varieties.map((v) => (
              <option key={v.id} value={v.name}>
                {v.name}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-base font-medium mb-1">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å</label>
          <input
            type="date"
            className="w-full border px-4 py-2 rounded-xl"
            value={tree.planted_date?.split("T")[0] || ""}
            onChange={(e) => setTree({ ...tree, planted_date: e.target.value })}
          />
        </div>

        <div>
          <label className="block text-base font-medium mb-1">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</label>
          <select
            className="w-full border px-4 py-2 rounded-xl"
            value={tree.status || "alive"}
            onChange={(e) => setTree({ ...tree, status: e.target.value })}
          >
            <option value="alive">üå± ‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï</option>
            <option value="dead">ü™¶ ‡∏ï‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß</option>
          </select>
        </div>

        {tree.status === "dead" && (
          <div>
            <label className="block text-base font-medium mb-1">
              üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏¢
            </label>
            <input
              type="date"
              className="w-full border px-4 py-2 rounded-xl"
              value={tree.death_date || ""}
              onChange={(e) => setTree({ ...tree, death_date: e.target.value })}
            />
          </div>
        )}

        <div>
          <label className="block text-base font-medium mb-1">
            ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ (‡πÄ‡∏°‡∏ï‡∏£)
          </label>
          <input
            type="number"
            className="w-full border px-4 py-2 rounded-xl"
            value={tree.tree_height || ""}
            onChange={(e) => setTree({ ...tree, tree_height: e.target.value })}
          />
        </div>

        <div>
          <label className="block text-base font-medium mb-1">
            ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏î‡∏≠‡∏Å
          </label>
          <input
            type="date"
            className="w-full border px-4 py-2 rounded-xl"
            value={tree.flower_date?.split("T")[0] || ""}
            onChange={(e) => setTree({ ...tree, flower_date: e.target.value })}
          />
        </div>

        <div>
          <label className="block text-base font-medium mb-1">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•</label>
          <input
            type="number"
            className="w-full border px-4 py-2 rounded-xl"
            value={tree.fruit_count || 0}
            onChange={(e) =>
              setTree({ ...tree, fruit_count: parseInt(e.target.value) || 0 })
            }
          />
        </div>

        <div className="flex flex-wrap gap-x-4 gap-y-2">
          <button
            onClick={saveTree}
            className="bg-green-600 text-white px-4 py-2 rounded-xl disabled:opacity-50"
            disabled={saving}
          >
            üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
          </button>
          <button
            onClick={createNewTree}
            className="bg-blue-600 text-white px-4 py-2 rounded-xl"
          >
            üå± ‡∏õ‡∏•‡∏π‡∏Å‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ
          </button>
        </div>
      </div>

      <hr className="my-8" />

      <h2 className="text-lg font-semibold mb-4">
        üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏à‡∏∏‡∏î {(id as string).toUpperCase()}
      </h2>
      <div className="overflow-x-auto">
        <table className="w-full text-sm border">
          <thead className="bg-gray-100">
            <tr>
              <th className="border px-3 py-2">‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà</th>
              <th className="border px-3 py-2">‡∏™‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå</th>
              <th className="border px-3 py-2">‡∏õ‡∏•‡∏π‡∏Å</th>
              <th className="border px-3 py-2">‡∏ï‡∏≤‡∏¢</th>
              <th className="border px-3 py-2">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
            </tr>
          </thead>
          <tbody>
            {history.map((t) => (
              <tr key={t.id} className="text-center">
                <td className="border px-3 py-2">{t.tree_number}</td>
                <td className="border px-3 py-2">{t.variety || "-"}</td>
                <td className="border px-3 py-2">
                  {t.planted_date?.split("T")[0]}
                </td>
                <td className="border px-3 py-2">{t.death_date || "-"}</td>
                <td className="border px-3 py-2">
                  {t.status === "alive" ? "üå±" : "ü™¶"}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </main>
  );
}
