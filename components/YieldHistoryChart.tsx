"use client"

import { useEffect, useRef } from 'react'
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  ChartData,
  ChartOptions
} from 'chart.js'
import { Line } from 'react-chartjs-2'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { YieldTrendData } from '@/lib/utils/yieldCalculations'

// Register Chart.js components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
)

interface YieldHistoryChartProps {
  data: YieldTrendData[]
  period: string
  loading?: boolean
}

export function YieldHistoryChart({ data, period, loading = false }: YieldHistoryChartProps) {
  const chartRef = useRef<ChartJS<'line'>>(null)

  // Prepare chart data
  const chartData: ChartData<'line'> = {
    labels: data.map(item => {
      const date = new Date(item.date)
      return date.toLocaleDateString('th-TH', { 
        month: 'short', 
        day: 'numeric',
        year: data.length > 30 ? '2-digit' : undefined
      })
    }),
    datasets: [
      {
        label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏™‡∏∞‡∏™‡∏°',
        data: data.map(item => item.yield),
        borderColor: 'rgb(34, 197, 94)', // green-500
        backgroundColor: 'rgba(34, 197, 94, 0.1)',
        pointBackgroundColor: data.map(item => {
          if (item.change > 0) return 'rgb(34, 197, 94)' // green for increase
          if (item.change < 0) return 'rgb(239, 68, 68)' // red for decrease
          return 'rgb(107, 114, 128)' // gray for no change
        }),
        pointBorderColor: data.map(item => {
          if (item.change > 0) return 'rgb(21, 128, 61)' // green-700
          if (item.change < 0) return 'rgb(185, 28, 28)' // red-700
          return 'rgb(75, 85, 99)' // gray-600
        }),
        pointRadius: 6,
        pointHoverRadius: 8,
        tension: 0.1,
        fill: true
      }
    ]
  }

  // Chart options
  const options: ChartOptions<'line'> = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'top' as const,
        labels: {
          font: {
            family: 'Inter, sans-serif'
          }
        }
      },
      title: {
        display: false
      },
      tooltip: {
        backgroundColor: 'rgba(0, 0, 0, 0.8)',
        titleColor: 'white',
        bodyColor: 'white',
        borderColor: 'rgba(255, 255, 255, 0.1)',
        borderWidth: 1,
        callbacks: {
          title: (context) => {
            const index = context[0].dataIndex
            const item = data[index]
            return new Date(item.date).toLocaleDateString('th-TH', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })
          },
          label: (context) => {
            const index = context.dataIndex
            const item = data[index]
            const lines = [
              `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡πÑ‡∏°‡πâ: ${item.yield} ‡∏•‡∏π‡∏Å`,
              `‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: ${item.change > 0 ? '+' : ''}${item.change} ‡∏•‡∏π‡∏Å`,
              `‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${item.reason}`,
              `‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${getActivityTypeLabel(item.activityType)}`
            ]
            return lines
          }
        }
      }
    },
    scales: {
      x: {
        display: true,
        title: {
          display: true,
          text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
          font: {
            family: 'Inter, sans-serif',
            size: 12
          }
        },
        grid: {
          color: 'rgba(0, 0, 0, 0.1)'
        },
        ticks: {
          maxTicksLimit: 10,
          font: {
            family: 'Inter, sans-serif',
            size: 11
          }
        }
      },
      y: {
        display: true,
        title: {
          display: true,
          text: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡πÑ‡∏°‡πâ (‡∏•‡∏π‡∏Å)',
          font: {
            family: 'Inter, sans-serif',
            size: 12
          }
        },
        grid: {
          color: 'rgba(0, 0, 0, 0.1)'
        },
        beginAtZero: true,
        ticks: {
          font: {
            family: 'Inter, sans-serif',
            size: 11
          },
          callback: function(value) {
            return `${value} ‡∏•‡∏π‡∏Å`
          }
        }
      }
    },
    interaction: {
      intersect: false,
      mode: 'index'
    },
    elements: {
      point: {
        hoverBorderWidth: 3
      }
    }
  }

  function getActivityTypeLabel(activityType: string): string {
    const labels: Record<string, string> = {
      'yield_update': '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï',
      'harvest': '‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß',
      'maintenance': '‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•',
      'fertilizer': '‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢',
      'pruning': '‡∏ï‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á'
    }
    return labels[activityType] || activityType
  }

  function getPeriodLabel(period: string): string {
    const labels: Record<string, string> = {
      '7days': '7 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤',
      '30days': '30 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤',
      '90days': '90 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤',
      '1year': '1 ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤',
      'all': '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
    }
    return labels[period] || period
  }

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center h-64">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600"></div>
            <span className="ml-2 text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</span>
          </div>
        </CardContent>
      </Card>
    )
  }

  if (data.length === 0) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï - {getPeriodLabel(period)}</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col items-center justify-center h-64 text-gray-500">
            <div className="text-4xl mb-2">üìä</div>
            <p className="text-lg font-medium">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï</p>
            <p className="text-sm mt-1">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß</p>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï - {getPeriodLabel(period)}</span>
          <div className="flex items-center gap-4 text-sm">
            <div className="flex items-center gap-1">
              <div className="w-3 h-3 bg-green-500 rounded-full"></div>
              <span>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô</span>
            </div>
            <div className="flex items-center gap-1">
              <div className="w-3 h-3 bg-red-500 rounded-full"></div>
              <span>‡∏•‡∏î‡∏•‡∏á</span>
            </div>
          </div>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="h-64 w-full">
          <Line ref={chartRef} data={chartData} options={options} />
        </div>
        
        {/* Summary Info */}
        <div className="mt-4 grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
          <div className="bg-gray-50 rounded-lg p-3">
            <div className="text-lg font-semibold text-gray-900">
              {data.length}
            </div>
            <div className="text-xs text-gray-600">‡∏à‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
          </div>
          
          <div className="bg-green-50 rounded-lg p-3">
            <div className="text-lg font-semibold text-green-600">
              {data[data.length - 1]?.yield || 0}
            </div>
            <div className="text-xs text-gray-600">‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</div>
          </div>
          
          <div className="bg-blue-50 rounded-lg p-3">
            <div className="text-lg font-semibold text-blue-600">
              {Math.max(...data.map(d => d.yield))}
            </div>
            <div className="text-xs text-gray-600">‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î</div>
          </div>
          
          <div className="bg-orange-50 rounded-lg p-3">
            <div className="text-lg font-semibold text-orange-600">
              {Math.min(...data.map(d => d.yield))}
            </div>
            <div className="text-xs text-gray-600">‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î</div>
          </div>
        </div>

        {/* Recent Events */}
        {data.length > 0 && (
          <div className="mt-4">
            <h4 className="text-sm font-medium text-gray-700 mb-2">‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:</h4>
            <div className="space-y-1">
              {data.slice(-3).reverse().map((item, index) => (
                <div key={index} className="text-xs text-gray-600 flex items-center justify-between">
                  <span>
                    {new Date(item.date).toLocaleDateString('th-TH')} - {item.reason}
                  </span>
                  <span className={`font-medium ${item.change > 0 ? 'text-green-600' : item.change < 0 ? 'text-red-600' : 'text-gray-600'}`}>
                    {item.change > 0 ? '+' : ''}{item.change} ‡∏•‡∏π‡∏Å
                  </span>
                </div>
              ))}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  )
}