import { PrismaClient } from '@/lib/generated/prisma';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Seeding development database...');

  // Clear existing data
  console.log('üßπ Clearing existing data...');
  await prisma.treeLog.deleteMany();
  await prisma.batchLog.deleteMany(); 
  await prisma.treeCost.deleteMany();
  await prisma.tree.deleteMany();
  await prisma.section.deleteMany();
  await prisma.plot.deleteMany();
  await prisma.variety.deleteMany();
  await prisma.fertilizer.deleteMany();
  await prisma.pesticide.deleteMany();
  await prisma.plantDisease.deleteMany();
  await prisma.activity.deleteMany();
  await prisma.activityCost.deleteMany();
  await prisma.users.deleteMany();

  // Seed reference data
  console.log('üìã Creating reference data...');
  
  const varieties = await prisma.variety.createMany({
    data: [
      { name: '‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ' },
      { name: '‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏™‡∏ß‡∏¢' },
      { name: '‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á‡πÅ‡∏Å‡πâ‡∏ß‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß' },
      { name: '‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á‡∏û‡∏¥‡∏°‡πÄ‡∏™‡∏ô' },
      { name: '‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á‡πÇ‡∏ä‡∏Ñ‡∏≠‡∏ô‡∏±‡∏ô‡∏ï‡πå' },
    ],
  });

  const fertilizers = await prisma.fertilizer.createMany({
    data: [
      { name: '‡∏õ‡∏∏‡πà‡∏¢‡∏Ñ‡∏≠‡∏Å' },
      { name: '‡∏õ‡∏∏‡πà‡∏¢‡πÄ‡∏Ñ‡∏°‡∏µ 15-15-15' },
      { name: '‡∏õ‡∏∏‡πà‡∏¢‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô' },
      { name: '‡∏õ‡∏∏‡πà‡∏¢‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™' },
      { name: '‡∏õ‡∏∏‡πà‡∏¢‡πÇ‡∏õ‡πÅ‡∏ï‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°' },
    ],
  });

  const pesticides = await prisma.pesticide.createMany({
    data: [
      { name: '‡∏¢‡∏≤‡∏Ü‡πà‡∏≤‡πÅ‡∏°‡∏•‡∏á' },
      { name: '‡∏¢‡∏≤‡∏Ü‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤' },
      { name: '‡∏™‡∏≤‡∏£‡∏Å‡∏≥‡∏à‡∏±‡∏î‡∏ß‡∏±‡∏ä‡∏û‡∏∑‡∏ä' },
      { name: '‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏û‡∏∑‡∏ä' },
      { name: '‡∏™‡∏ö‡∏π‡πà‡πÄ‡∏´‡∏•‡∏ß' },
    ],
  });

  const activities = await prisma.activity.createMany({
    data: [
      { name: '‡∏£‡∏î‡∏ô‡πâ‡∏≥' },
      { name: '‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πà‡∏¢' },
      { name: '‡∏â‡∏µ‡∏î‡∏¢‡∏≤' },
      { name: '‡∏ï‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏¥‡πà‡∏á' },
      { name: '‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß' },
      { name: '‡∏î‡∏π‡πÅ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ' },
    ],
  });

  // Create test plots
  console.log('üó∫Ô∏è Creating plots and sections...');
  
  const plot1 = await prisma.plot.create({
    data: {
      code: 'DEV-01',
      name: '‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö 1',
      area: 500,
      soilType: '‡∏î‡∏¥‡∏ô‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß',
      description: '‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö',
    },
  });

  const plot2 = await prisma.plot.create({
    data: {
      code: 'DEV-02', 
      name: '‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö 2',
      area: 300,
      soilType: '‡∏î‡∏¥‡∏ô‡∏£‡πà‡∏ß‡∏ô',
      description: '‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
    },
  });

  // Create sections
  const section1 = await prisma.section.create({
    data: {
      plotId: plot1.id,
      sectionNumber: 1,
      sectionCode: 'DEV-01-A',
      name: '‡πÇ‡∏Ñ‡∏Å A',
      area: 250,
      soilType: '‡∏î‡∏¥‡∏ô‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß',
    },
  });

  const section2 = await prisma.section.create({
    data: {
      plotId: plot1.id,
      sectionNumber: 2,
      sectionCode: 'DEV-01-B',
      name: '‡πÇ‡∏Ñ‡∏Å B',
      area: 250,
      soilType: '‡∏î‡∏¥‡∏ô‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß',
    },
  });

  const section3 = await prisma.section.create({
    data: {
      plotId: plot2.id,
      sectionNumber: 1,
      sectionCode: 'DEV-02-A',
      name: '‡πÇ‡∏Ñ‡∏Å A',
      area: 300,
      soilType: '‡∏î‡∏¥‡∏ô‡∏£‡πà‡∏ß‡∏ô',
    },
  });

  // Create test trees
  console.log('üå≥ Creating test trees...');
  
  const trees = [];
  
  // Section 1 trees
  for (let i = 1; i <= 10; i++) {
    const tree = await prisma.tree.create({
      data: {
        location_id: `A${i.toString().padStart(2, '0')}`,
        treeCode: `A${i.toString().padStart(2, '0')}`,
        variety: i % 2 === 0 ? '‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ' : '‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏™‡∏ß‡∏¢',
        plantedDate: new Date(2022, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),
        status: 'alive',
        treeNumber: i,
        sectionId: section1.id,
        fruitCount: Math.floor(Math.random() * 50) + 10,
        bloomingStatus: ['blooming', 'budding', 'not_blooming'][Math.floor(Math.random() * 3)],
      },
    });
    trees.push(tree);
  }

  // Section 2 trees
  for (let i = 1; i <= 8; i++) {
    const tree = await prisma.tree.create({
      data: {
        location_id: `B${i.toString().padStart(2, '0')}`,
        treeCode: `B${i.toString().padStart(2, '0')}`,
        variety: i % 3 === 0 ? '‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á‡πÅ‡∏Å‡πâ‡∏ß‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß' : '‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á‡∏û‡∏¥‡∏°‡πÄ‡∏™‡∏ô',
        plantedDate: new Date(2022, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),
        status: 'alive',
        treeNumber: i,
        sectionId: section2.id,
        fruitCount: Math.floor(Math.random() * 40) + 5,
        bloomingStatus: ['blooming', 'budding', 'not_blooming'][Math.floor(Math.random() * 3)],
      },
    });
    trees.push(tree);
  }

  // Section 3 trees
  for (let i = 1; i <= 12; i++) {
    const tree = await prisma.tree.create({
      data: {
        location_id: `C${i.toString().padStart(2, '0')}`,
        treeCode: `C${i.toString().padStart(2, '0')}`,
        variety: '‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á‡πÇ‡∏ä‡∏Ñ‡∏≠‡∏ô‡∏±‡∏ô‡∏ï‡πå',
        plantedDate: new Date(2023, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),
        status: Math.random() > 0.9 ? 'sick' : 'alive',
        treeNumber: i,
        sectionId: section3.id,
        fruitCount: Math.floor(Math.random() * 60) + 15,
        bloomingStatus: ['blooming', 'budding', 'not_blooming'][Math.floor(Math.random() * 3)],
      },
    });
    trees.push(tree);
  }

  // Create sample tree logs with yield changes
  console.log('üìù Creating sample logs...');
  
  const sampleLogs = [
    { notes: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡πÑ‡∏°‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≤‡∏Å 20 ‡∏•‡∏π‡∏Å ‡πÄ‡∏õ‡πá‡∏ô 35 ‡∏•‡∏π‡∏Å (+15)', activityType: '‡∏î‡∏π‡πÅ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ' },
    { notes: '‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡∏±‡∏ö‡∏ú‡∏•‡πÑ‡∏°‡πâ ‡∏à‡∏≤‡∏Å 45 ‡∏•‡∏π‡∏Å ‡πÄ‡∏õ‡πá‡∏ô 42 ‡∏•‡∏π‡∏Å (-3)', activityType: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' },
    { notes: '‡∏ú‡∏•‡πÑ‡∏°‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏î‡∏µ ‡∏à‡∏≤‡∏Å 30 ‡∏•‡∏π‡∏Å ‡πÄ‡∏õ‡πá‡∏ô 48 ‡∏•‡∏π‡∏Å (+18)', activityType: '‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πà‡∏¢' },
    { notes: '‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô ‡∏à‡∏≤‡∏Å 50 ‡∏•‡∏π‡∏Å ‡πÄ‡∏õ‡πá‡∏ô 35 ‡∏•‡∏π‡∏Å (-15)', activityType: '‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß' },
    { notes: '‡∏î‡∏≠‡∏Å‡∏ö‡∏≤‡∏ô ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏ú‡∏•‡πÑ‡∏°‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏à‡∏≤‡∏Å 25 ‡∏•‡∏π‡∏Å ‡πÄ‡∏õ‡πá‡∏ô 40 ‡∏•‡∏π‡∏Å (+15)', activityType: '‡∏î‡∏π‡πÅ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ' },
  ];

  for (let i = 0; i < Math.min(trees.length, 15); i++) {
    const tree = trees[i];
    const logData = sampleLogs[i % sampleLogs.length];
    
    await prisma.treeLog.create({
      data: {
        treeId: tree.id,
        logDate: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000),
        notes: logData.notes,
        activityType: logData.activityType,
        healthStatus: ['healthy', 'sick', 'pest'][Math.floor(Math.random() * 3)],
        fertilizerType: Math.random() > 0.5 ? '‡∏õ‡∏∏‡πà‡∏¢‡∏Ñ‡∏≠‡∏Å' : '‡∏õ‡∏∏‡πà‡∏¢‡πÄ‡∏Ñ‡∏°‡∏µ 15-15-15',
        createdBy: 'dev-seed',
      },
    });
  }

  // Create some cost records
  console.log('üí∞ Creating cost records...');
  
  await prisma.treeCost.createMany({
    data: [
      {
        costDate: new Date(),
        activityType: '‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πà‡∏¢',
        target: '‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏ß‡∏ô',
        amount: 5000,
        notes: '‡∏ã‡∏∑‡πâ‡∏≠‡∏õ‡∏∏‡πà‡∏¢‡∏Ñ‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ',
      },
      {
        costDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
        activityType: '‡∏â‡∏µ‡∏î‡∏¢‡∏≤',
        target: '‡πÅ‡∏õ‡∏•‡∏á DEV-01',
        amount: 2500,
        notes: '‡∏¢‡∏≤‡∏Ü‡πà‡∏≤‡πÅ‡∏°‡∏•‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤',
      },
      {
        costDate: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000),
        activityType: '‡∏î‡∏π‡πÅ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
        target: '‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏ß‡∏ô',
        amount: 1500,
        notes: '‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏¥‡πà‡∏á',
      },
    ],
  });

  console.log('‚úÖ Development database seeded successfully!');
  console.log(`üìä Created:`);
  console.log(`  - ${trees.length} trees across 3 sections`);
  console.log(`  - Sample logs with yield tracking data`);  
  console.log(`  - Reference data (varieties, fertilizers, etc.)`);
  console.log(`  - Cost tracking examples`);
}

main()
  .catch((e) => {
    console.error('‚ùå Seeding failed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });